---
title: "Untitled"
format: 
  html:
    page-layout: custom
    theme: lumen
server: shiny
execute: 
  echo: false
  warning: false
---
  
# TODO:
* see regex filter option in `reactable`
https://glin.github.io/reactable/articles/custom-filtering.html#regular-expression-pattern-filtering
* formatting
https://glin.github.io/reactable/articles/custom-rendering.html
* observable?
  https://glin.quarto.pub/observable-reactable/

  
```{r input-demo}
#| eval: !expr interactive()

input <-
  list(
    col_name = "_id",
    table_name = "ord",
    search_type = "Table"
  )

shiny::reactiveConsole(enabled = TRUE)

table_search <- function() input$table_name
col_search <- function() input$col_name
```

```{r workspace}
#| context: setup

library(tidyverse)
library(shinyWidgets)
library(shiny)
library(DT)
library(glue)

raw_data <- 
  read_rds("all_metadata.Rds") |> 
  mutate_if(is.character, as.factor)
```

```{r functions}
#| context: setup
base_datatable <- function(df, ...) {
  datatable(
    df,
    filter = "top",
    rownames = FALSE,
    escape = FALSE,
    options =
      list(
        dom = "Brtip",
        deferRender = FALSE,
        scrollY = 540,
        scroller = TRUE,
        scrollX = TRUE,
        fixedHeader = FALSE,
        pageLength = nrow(df),
        lengthChange = FALSE,
        ...
      )
  )
}

extract_bold <- function(string, pattern) {
  # string <- "am - cyl - disp - hp"
  # pattern <- "cyl hp"
  
  bold_pattern <- 
    glue(
      "(?i)({x})",
      x = str_replace_all(pattern, " ", "|")
    )
  
  string |> 
    str_replace_all(bold_pattern, "<strong>\\1</strong>")
}
```

```{r ui-prep}
#| context: setup

table_name <-
  textInput(
    "table_name",
    label = "Table(s): regex supported",
    placeholder = "type table names"
  )


col_name <-
  textInput(
    "col_name",
    label = "Column(s): fragments & spaces",
    placeholder = "type column names",
    value = "cyl"
  )

search_type <-
  selectInput(#radioGroupButtons(
    "search_type",
    label = "One row per",
    choices = c("Column", "Table")#,status = "primary"
  )

fluidPage(
  fluidRow(
    column(3, table_name),
    column(5, col_name),
    column(2, search_type)
  ),
  DTOutput("table")
)
```


```{r server}
#| context: server

table_search <- debounce(reactive(input$table_name), 1000)
col_search <- debounce(reactive(input$col_name), 2000)

prepare_regex <- function(x) {
  # x <- "a  b c"
  pattern <-
    ifelse(x == "", ".*", x) |> 
    str_replace_all("\\s+", "|")
  
  glue("(?i){pattern}")
}

output$table <- DT::renderDT({
  
  print(reactiveValuesToList(input))
  print(input$search_type)
  
  table_regex <- prepare_regex(table_search())
  column_regex <- prepare_regex(col_search())
  
  
  # multi_col_entered <- length(column_all) > 1
  column_search_selected <- input$search_type == "Column"
  
  # print(use_column_view)
  # print(input$search_type)
  # print(column_all)
  
  # which dataset to use
  if (column_search_selected) {
    base_data <- raw_data
    
    
  } else {  
    base_data <- 
      raw_data |>
      group_by(table_name) |>
      summarise(field = paste(sort(field), collapse = " â€¢ ")) |>
      ungroup()
  }
  
  
  df <- 
    base_data |> 
    filter(
      str_detect(table_name, table_regex),
      str_detect(field, column_regex)
    )
  
  
  # final manipulation
  if (column_search_selected) {
    base_datatable(df)
    
  } else {
    # bold text if column search != ".*"
    df |> 
      mutate(field = map_chr(field, extract_bold, column_regex)) |> 
      base_datatable(
        autoWidth = TRUE,
        columnDefs = list(
          list(targets = c(0), visible = TRUE, width = "10%"),
          list(targets = c(1), visible = TRUE, width = "80%")
        )
      )
  }
  
}, server = TRUE)


# final_df |> 
#   reactable::reactable(
#     columns = list(
#       field = colDef(html = TRUE)
#     )
#   )
```
