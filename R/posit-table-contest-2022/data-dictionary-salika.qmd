---
title: "Data Dictionary"
format: 
  html:
    code-tools: true
execute: 
  echo: false
  message: false
  warning: false
---

```{r}
library(tidyverse)
library(shiny)
library(reactable)

raw_data <- 
  read_rds("salika.Rds") |> 
  mutate_if(is.character, as.factor)
```

```{r}
# js_filter <- # Filter by case-insensitive text match
#   JS(
#     "function(rows, columnId, filterValue) {
#       let pattern = filterValue.split(' ').filter(n => n).sort().join('.*')
#       let regexPattern = RegExp(RegExp.quote(pattern), 'gi')
#         
#       return rows.filter(
#         function(row) {
#           return regexPattern.test(row.values[columnId])
#         }
#       )
#     }"
# )


js_filter <-  JS({
  "function(rows, columnId, filterValue) {
      try {
        let pattern = filterValue.split(' ').filter(n => n).sort().join('.*')
        let regexPattern = RegExp(pattern, 'i')
        
        return rows.filter(
          function(row) {
            return regexPattern.test(row.values[columnId])
          }
        )
      } catch(e) {
          return rows
      }
       
  }"
})


js_match_style <- JS({
  "function(cellInfo) {
    try {
      let filterValue = cellInfo.filterValue
      let pattern = filterValue.split(' ').filter(n => n).sort().join('|')
      let regexPattern = new RegExp('(' + pattern + ')', 'gi')
      let replacement = '<span style=\"color:black;font-weight:bold;\">$1</span>'
      return cellInfo.value.replace(regexPattern, replacement)
    } catch(e) {
        return cellInfo.value
    }
  }"
})

# js_match_style <-
#   JS(
#     "function(cellInfo) {
#       if (!cellInfo.filterValue) {
#         return cellInfo.value
#       } else {
#         let filterValue = cellInfo.filterValue
#         let pattern = filterValue.split(' ').filter(n => n).sort().join('|')
#         let regexPattern = new RegExp('(' + pattern + ')', 'gi')
#         let replacement = '<span style=\"color:black;font-weight:bold;\">$1</span>'
#         return cellInfo.value.replace(regexPattern, replacement)
#       }
#     }"
#   )


raw_data |>
  group_by(table) |>
  summarise(field_list = paste(sort(field), collapse = " â€¢ ")) |>
  ungroup() |>
  reactable(
    #pagination = FALSE, 
    defaultPageSize = 10,
    highlight = TRUE, 
    height = 500,
    theme = reactableTheme(
      style = list(
        color = "#444444",
        fontFamily = "Segoe UI, Helvetica, Arial, sans-serif"
      )
    ),
    defaultColDef = colDef(
      filterable = TRUE,
      filterMethod = js_filter,
      cell = js_match_style,
      html = TRUE
    ),
    columns = list(table = colDef(width = 200))
  )
```

```{r}
knitr::knit_exit()

reactable(
  tibble(x = head(sentences)),
  pagination = FALSE,
  columns = list(
      x = colDef(
        width = 200,
        filterable = TRUE,
        filterMethod = 
          JS(
            "function(rows, columnId, filterValue) {
                try {
                  let pattern = filterValue.split(' ').filter(n => n).sort().join('.*')
                  let regexPattern = RegExp(pattern, 'i')
                  
                  return rows.filter(
                    function(row) {
                      return regexPattern.test(row.values[columnId])
                    }
                  )
                } catch(e) {
                    return rows
                }
                 
            }"
        )
      )
    )
)
```



```{html}
<input type="text" id="textInput" value="" />
<p id="result">The quick brown fox jumped over the lazy dog</p>
  
  
var watchText = document.getElementById("textInput");

watchText.addEventListener('keyup', function(evt) {
  var defaultValue = "The quick brown fox jumped over the lazy dog"
  var filterValue = document.getElementById("textInput").value;
  let pattern = filterValue.split(' ').filter(n => n).sort().join('|')
  let regexPattern = new RegExp('(' + pattern + ')', 'gi')
  let replacement = '<b> $1 </b>'  
  
  document.getElementById("result").innerHTML = defaultValue.replace(regexPattern, replacement);
}, false);
```

```{html}
<!DOCTYPE html>
<html>
<body>
Some text...
<h3>A demonstration of how to access a Text Field</h3>

<p> Look for "The quick brown fox jumped over the lazy dog" <p>


<input type="text" id="myText" value="Some text...">

<p>Click the "Try it" button to get the text in the text field.</p>

<button onclick="myFunction()">Try it</button>

<p id="demo"></p>

<script>
function myFunction() {
  var x = "The quick brown fox jumped over the lazy dog"
  var filterValue = document.getElementById("myText").value;
  let pattern = filterValue.split(' ').filter(n => n).sort().join('|')
  let regexPattern = new RegExp('(' + pattern + ')', 'gi')
  let replacement = '<b> $1 </b>'  
  
  document.getElementById("demo").innerHTML = x.replace(regexPattern, replacement);
}
</script>

</body>
</html>

```


js_filter_old <- # Filter by case-insensitive text match
  JS(
    "function(rows, columnId, filterValue) {
      let isPatternValid = function(pattern) {
        try {
            "".match(new RegExp(pattern));
            return true;
        } catch (err) {
            return false;
        }
      }
    
      if (!isPatternValid(filterValue)) {
        return rows;
      } else {
        let pattern = new RegExp(filterValue.replace(' ', '.*'), 'i')
        
          return rows.filter(
            function(row) {
              return pattern.test(row.values[columnId])
            }
          )
      }
    }"
  )
